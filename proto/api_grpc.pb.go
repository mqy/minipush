// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiniPushClusterClient is the client API for MiniPushCluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiniPushClusterClient interface {
	ClusterStatus(ctx context.Context, in *ClusterStatusReq, opts ...grpc.CallOption) (*ClusterStatusResp, error)
	Route(ctx context.Context, opts ...grpc.CallOption) (MiniPushCluster_RouteClient, error)
}

type miniPushClusterClient struct {
	cc grpc.ClientConnInterface
}

func NewMiniPushClusterClient(cc grpc.ClientConnInterface) MiniPushClusterClient {
	return &miniPushClusterClient{cc}
}

func (c *miniPushClusterClient) ClusterStatus(ctx context.Context, in *ClusterStatusReq, opts ...grpc.CallOption) (*ClusterStatusResp, error) {
	out := new(ClusterStatusResp)
	err := c.cc.Invoke(ctx, "/minipush.MiniPushCluster/ClusterStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniPushClusterClient) Route(ctx context.Context, opts ...grpc.CallOption) (MiniPushCluster_RouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &MiniPushCluster_ServiceDesc.Streams[0], "/minipush.MiniPushCluster/Route", opts...)
	if err != nil {
		return nil, err
	}
	x := &miniPushClusterRouteClient{stream}
	return x, nil
}

type MiniPushCluster_RouteClient interface {
	Send(*FollowerMsg) error
	Recv() (*LeaderMsg, error)
	grpc.ClientStream
}

type miniPushClusterRouteClient struct {
	grpc.ClientStream
}

func (x *miniPushClusterRouteClient) Send(m *FollowerMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *miniPushClusterRouteClient) Recv() (*LeaderMsg, error) {
	m := new(LeaderMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MiniPushClusterServer is the server API for MiniPushCluster service.
// All implementations must embed UnimplementedMiniPushClusterServer
// for forward compatibility
type MiniPushClusterServer interface {
	ClusterStatus(context.Context, *ClusterStatusReq) (*ClusterStatusResp, error)
	Route(MiniPushCluster_RouteServer) error
	mustEmbedUnimplementedMiniPushClusterServer()
}

// UnimplementedMiniPushClusterServer must be embedded to have forward compatible implementations.
type UnimplementedMiniPushClusterServer struct {
}

func (UnimplementedMiniPushClusterServer) ClusterStatus(context.Context, *ClusterStatusReq) (*ClusterStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterStatus not implemented")
}
func (UnimplementedMiniPushClusterServer) Route(MiniPushCluster_RouteServer) error {
	return status.Errorf(codes.Unimplemented, "method Route not implemented")
}
func (UnimplementedMiniPushClusterServer) mustEmbedUnimplementedMiniPushClusterServer() {}

// UnsafeMiniPushClusterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiniPushClusterServer will
// result in compilation errors.
type UnsafeMiniPushClusterServer interface {
	mustEmbedUnimplementedMiniPushClusterServer()
}

func RegisterMiniPushClusterServer(s grpc.ServiceRegistrar, srv MiniPushClusterServer) {
	s.RegisterService(&MiniPushCluster_ServiceDesc, srv)
}

func _MiniPushCluster_ClusterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniPushClusterServer).ClusterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minipush.MiniPushCluster/ClusterStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniPushClusterServer).ClusterStatus(ctx, req.(*ClusterStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniPushCluster_Route_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MiniPushClusterServer).Route(&miniPushClusterRouteServer{stream})
}

type MiniPushCluster_RouteServer interface {
	Send(*LeaderMsg) error
	Recv() (*FollowerMsg, error)
	grpc.ServerStream
}

type miniPushClusterRouteServer struct {
	grpc.ServerStream
}

func (x *miniPushClusterRouteServer) Send(m *LeaderMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *miniPushClusterRouteServer) Recv() (*FollowerMsg, error) {
	m := new(FollowerMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MiniPushCluster_ServiceDesc is the grpc.ServiceDesc for MiniPushCluster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiniPushCluster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "minipush.MiniPushCluster",
	HandlerType: (*MiniPushClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClusterStatus",
			Handler:    _MiniPushCluster_ClusterStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Route",
			Handler:       _MiniPushCluster_Route_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
